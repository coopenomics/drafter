export interface TemplateFile {
  id: string;
  name: string;
  title: string;
  fileName: string;
  context: string;
  translation: Record<string, any>;
  exampleData: Record<string, any>;
}

export class TemplateService {
  private cooptypesPath: string;

  constructor() {
    this.cooptypesPath =
      import.meta.env.VITE_COOPTYPES_REGISTRY_PATH ||
      '../cooptypes/src/cooperative/registry';
  }

  async loadTemplatesList(): Promise<TemplateFile[]> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Electron API
      if (window.electronAPI) {
        const templateDirs = await window.electronAPI.listCooptypeDirectories();
        return templateDirs.map((dirName) => {
          const id = dirName;
          const name = this.formatTemplateName(dirName);
          const fileName = `${dirName}.json`; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

          return {
            id,
            name,
            title: name,
            fileName,
            context: '',
            translation: {},
            exampleData: {},
          };
        });
      } else {
        // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
        return this.getHardcodedTemplatesList();
      }
    } catch (error) {
      console.error('Error loading templates list:', error);
      return this.getHardcodedTemplatesList();
    }
  }

  async loadTemplate(fileName: string): Promise<TemplateFile | null> {
    try {
      const templateId = fileName.replace('.json', '');
      console.log('üîÑ Loading template:', { fileName, templateId });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Electron API
      if (window.electronAPI) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cooptypes
        console.log('üìÅ Reading cooptype file via Electron API...');
        const cooptypeContent = await window.electronAPI.readCooptypeFile(
          templateId
        );
        console.log(
          'üìÑ Raw cooptype content preview:',
          cooptypeContent.substring(0, 300) + '...'
        );

        const cooptypeData = this.parseCooptypeFile(cooptypeContent);
        console.log('üîç Parsed cooptype data:', {
          contextLength: cooptypeData.context?.length || 0,
          translationsKeys: Object.keys(cooptypeData.translations || {}),
          exampleDataKeys: Object.keys(cooptypeData.exampleData || {}),
          hasExampleData: !!(
            cooptypeData.exampleData &&
            Object.keys(cooptypeData.exampleData).length > 0
          ),
        });

        const context = cooptypeData.context || '';
        const translation = cooptypeData.translations?.ru || {};
        const exampleData = cooptypeData.exampleData || {};
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π title –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞
        const title = cooptypeData.title || this.formatTemplateName(templateId);

        console.log('‚úÖ Final template data:', {
          id: templateId,
          contextLength: context.length,
          translationKeys: Object.keys(translation),
          exampleDataKeys: Object.keys(exampleData),
          exampleDataSample:
            JSON.stringify(exampleData).substring(0, 200) + '...',
        });

        return {
          id: templateId,
          name: this.formatTemplateName(templateId),
          title: title,
          fileName,
          context,
          translation,
          exampleData,
        };
      } else {
        // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch
        console.log('üåê Fallback: using fetch for web version...');
        const response = await fetch(`/api/cooptypes/${templateId}`);
        if (!response.ok) {
          throw new Error('Template not found');
        }

        const data = await response.text();
        const cooptypeData = this.parseCooptypeFile(data);
        const title = cooptypeData.title || this.formatTemplateName(templateId);

        return {
          id: templateId,
          name: this.formatTemplateName(templateId),
          title: title,
          fileName,
          context: cooptypeData.context || '',
          translation: cooptypeData.translations?.ru || {},
          exampleData: cooptypeData.exampleData || {},
        };
      }
    } catch (error) {
      console.error('‚ùå Error loading template:', error);
      return null;
    }
  }

  async saveTemplate(template: TemplateFile): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Electron API
      if (window.electronAPI) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª –≤ cooptypes
        await this.updateCooptypeFile(template);
        return true;
      } else {
        // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
        const response = await fetch(`/api/cooptypes/${template.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            context: template.context,
            translation: template.translation,
            exampleData: template.exampleData,
          }),
        });

        return response.ok;
      }
    } catch (error) {
      console.error('Error saving template:', error);
      return false;
    }
  }

  private parseCooptypeFile(content: string): any {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º title –∏–∑ —Ñ–∞–π–ª–∞
      const titleMatch = content.match(/export const title = ['"`](.*?)['"`]/);
      let title = '';
      if (titleMatch) {
        title = titleMatch[1]
          .replace(/\\n/g, '\n')
          .replace(/\\t/g, '\t')
          .replace(/\\'/g, "'")
          .replace(/\\"/g, '"')
          .replace(/\\\\/g, '\\');
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º context —Å —É—á–µ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
      const contextMatch = content.match(
        /export const context = ['"`]([\s\S]*?)['"`](?=\s*export|\s*$)/
      );
      let context = '';
      if (contextMatch) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        context = contextMatch[1]
          .replace(/\\n/g, '\n') // –ó–∞–º–µ–Ω—è–µ–º \\n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
          .replace(/\\t/g, '\t') // –ó–∞–º–µ–Ω—è–µ–º \\t –Ω–∞ —Ç–∞–±—É–ª—è—Ü–∏—é
          .replace(/\\'/g, "'") // –ó–∞–º–µ–Ω—è–µ–º \\' –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
          .replace(/\\"/g, '"') // –ó–∞–º–µ–Ω—è–µ–º \\" –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
          .replace(/\\\\/g, '\\'); // –ó–∞–º–µ–Ω—è–µ–º \\\\ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
      }

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫
      const extractObjectContent = (
        text: string,
        startPattern: string
      ): string | null => {
        const startIndex = text.indexOf(startPattern);
        if (startIndex === -1) return null;

        const objectStart = text.indexOf('{', startIndex);
        if (objectStart === -1) return null;

        let braceCount = 0;
        let current = objectStart;

        while (current < text.length) {
          const char = text[current];
          if (char === '{') braceCount++;
          if (char === '}') braceCount--;

          if (braceCount === 0) {
            // –ù–∞–π–¥–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –æ–±—ä–µ–∫—Ç–∞
            return text.substring(objectStart + 1, current);
          }
          current++;
        }

        return null;
      };

      // –ò–∑–≤–ª–µ–∫–∞–µ–º translations —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
      let translations = {};
      const translationsContent = extractObjectContent(
        content,
        'export const translations = {'
      );
      if (translationsContent) {
        try {
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
          const translationsCode = `return {${translationsContent}}`;
          const func = new Function(translationsCode);
          translations = func();
        } catch (e) {
          console.warn(
            'Could not parse translations, trying alternative method:',
            e
          );
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—â–µ–º ru —Å–µ–∫—Ü–∏—é
          const ruMatch = translationsContent.match(
            /ru:\s*\{([\s\S]*?)\}(?=\s*,?\s*[a-zA-Z_]|\s*$)/
          );
          if (ruMatch) {
            try {
              const ruCode = `return {${ruMatch[1]}}`;
              const ruFunc = new Function(ruCode);
              translations = { ru: ruFunc() };
            } catch (e2) {
              console.warn('Alternative parsing also failed:', e2);
              console.log('Failed ru content:', ruMatch[1]);
            }
          }
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º exampleData –µ—Å–ª–∏ –µ—Å—Ç—å
      let exampleData = {};
      const exampleDataContent = extractObjectContent(
        content,
        'export const exampleData = {'
      );
      if (exampleDataContent) {
        try {
          const exampleDataCode = `return {${exampleDataContent}}`;
          const func = new Function(exampleDataCode);
          exampleData = func();
        } catch (e) {
          console.warn('Could not parse exampleData:', e);
          console.log(
            'Failed exampleData content:',
            exampleDataContent.substring(0, 200) + '...'
          );
        }
      }

      console.log('Parsed cooptype file:', {
        contextLength: context.length,
        translationsKeys: Object.keys(translations),
        exampleDataKeys: Object.keys(exampleData),
        contextPreview:
          context.substring(0, 200) + (context.length > 200 ? '...' : ''),
      });

      return {
        title,
        context,
        translations,
        exampleData,
      };
    } catch (error) {
      console.error('Error parsing cooptype file:', error);
      return {
        title: '',
        context: '',
        translations: {},
        exampleData: {},
      };
    }
  }

  private async updateCooptypeFile(template: TemplateFile): Promise<void> {
    try {
      if (!window.electronAPI) return;

      // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª cooptype
      let existingContent = await window.electronAPI.readCooptypeFile(
        template.id
      );

      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–±—É—é –∑–∞–º–µ–Ω—É —Ç–µ–∫—Å—Ç–∞
      // –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const contextStartPattern = 'export const context =';
      const contextStartIndex = existingContent.indexOf(contextStartPattern);

      if (contextStartIndex === -1) {
        console.error('–ë–ª–æ–∫ context –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ');
        return;
      }

      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ "export const context ="
      let quoteStartIndex = contextStartIndex + contextStartPattern.length;
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
      while (existingContent[quoteStartIndex] === ' ') {
        quoteStartIndex++;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–≤—ã—á–∫–∏
      const quoteChar = existingContent[quoteStartIndex];

      if (quoteChar !== "'" && quoteChar !== '"' && quoteChar !== '`') {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–∞–≤—ã—á–∫–∏ –≤ –±–ª–æ–∫–µ context');
        return;
      }

      // –ò—â–µ–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ (–∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É —Å —É—á–µ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
      let quoteEndIndex = quoteStartIndex + 1;
      let escaped = false;

      // –ü–æ–∏—Å–∫ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–∞–≤—ã—á–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      while (quoteEndIndex < existingContent.length) {
        const char = existingContent[quoteEndIndex];

        if (char === '\\') {
          escaped = !escaped; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        } else if (char === quoteChar && !escaped) {
          break; // –ù–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É
        } else {
          escaped = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        }

        quoteEndIndex++;
      }

      if (quoteEndIndex >= existingContent.length) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ context');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const newContextBlock = `${contextStartPattern} \`${template.context}\``;

      // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π
      const beforeContext = existingContent.substring(0, contextStartIndex);
      const afterContext = existingContent.substring(quoteEndIndex + 1);

      // –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      existingContent = beforeContext + newContextBlock + afterContext;

      // –û–±–Ω–æ–≤–ª—è–µ–º translations –∏ exampleData (–∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å –ø–æ–∏—Å–∫–æ–º –º–∞—Ä–∫–µ—Ä–æ–≤)

      // –û–±–Ω–æ–≤–ª—è–µ–º translations
      const translationsStartPattern = 'export const translations =';
      const translationsStartIndex = existingContent.indexOf(
        translationsStartPattern
      );

      if (translationsStartIndex !== -1) {
        const translationsBracketIndex = existingContent.indexOf(
          '{',
          translationsStartIndex
        );
        if (translationsBracketIndex !== -1) {
          // –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Ñ–∏–≥—É—Ä–Ω—É—é —Å–∫–æ–±–∫—É —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
          let bracketCount = 1;
          let translationsEndIndex = translationsBracketIndex + 1;

          while (
            translationsEndIndex < existingContent.length &&
            bracketCount > 0
          ) {
            if (existingContent[translationsEndIndex] === '{') {
              bracketCount++;
            } else if (existingContent[translationsEndIndex] === '}') {
              bracketCount--;
            }
            translationsEndIndex++;
          }

          if (bracketCount === 0) {
            const newTranslations = `${translationsStartPattern} {
  ru: ${JSON.stringify(template.translation, null, 4).replace(/^/gm, '    ')},
}`;

            existingContent =
              existingContent.substring(0, translationsStartIndex) +
              newTranslations +
              existingContent.substring(translationsEndIndex);
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º exampleData
      const exampleDataStartPattern = 'export const exampleData =';
      const exampleDataStartIndex = existingContent.indexOf(
        exampleDataStartPattern
      );

      const newExampleData = `${exampleDataStartPattern} ${JSON.stringify(
        template.exampleData,
        null,
        2
      )}`;

      if (exampleDataStartIndex !== -1) {
        const exampleDataBracketIndex = existingContent.indexOf(
          '{',
          exampleDataStartIndex
        );
        if (exampleDataBracketIndex !== -1) {
          // –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Ñ–∏–≥—É—Ä–Ω—É—é —Å–∫–æ–±–∫—É —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
          let bracketCount = 1;
          let exampleDataEndIndex = exampleDataBracketIndex + 1;

          while (
            exampleDataEndIndex < existingContent.length &&
            bracketCount > 0
          ) {
            if (existingContent[exampleDataEndIndex] === '{') {
              bracketCount++;
            } else if (existingContent[exampleDataEndIndex] === '}') {
              bracketCount--;
            }
            exampleDataEndIndex++;
          }

          if (bracketCount === 0) {
            existingContent =
              existingContent.substring(0, exampleDataStartIndex) +
              newExampleData +
              existingContent.substring(exampleDataEndIndex);
          }
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º exampleData –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        existingContent += `\n\n// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤\n${newExampleData}\n`;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await window.electronAPI.writeCooptypeFile(template.id, existingContent);
      console.log('–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞:', error);
    }
  }

  private getHardcodedTemplatesList(): TemplateFile[] {
    const templates = [
      '1.WalletAgreement',
      '100.ParticipantApplication',
      '1000.InvestmentAgreement',
      '1001.InvestByResultStatement',
      '1002.InvestByResultAct',
      '1005.InvestByMoneyStatement',
      '101.SelectBranchStatement',
      '1010.InvestMembershipConvertation',
      '2.RegulationElectronicSignature',
      '3.PrivacyPolicy',
      '300.AnnualGeneralMeetingAgenda',
      '301.AnnualGeneralMeetingSovietDecision',
      '302.AnnualGeneralMeetingNotification',
      '303.AnnualGeneralMeetingVotingBallot',
      '304.AnnualGeneralMeetingDecision',
      '4.UserAgreement',
      '50.CoopenomicsAgreement',
      '501.DecisionOfParticipantApplication',
      '599.ProjectFreeDecision',
      '600.FreeDecision',
      '700.AssetContributionStatement',
      '701.AssetContributionDecision',
      '702.AssetContributionAct',
      '800.ReturnByAssetStatement',
      '801.ReturnByAssetDecision',
      '802.ReturnByAssetAct',
    ];

    return templates.map((templateId) => {
      const name = this.formatTemplateName(templateId);
      const fileName = `${templateId}.json`;

      return {
        id: templateId,
        name,
        title: name,
        fileName,
        context: '',
        translation: {},
        exampleData: {},
      };
    });
  }

  private formatTemplateName(templateId: string): string {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const parts = templateId.split('.');

    if (parts.length === 2) {
      const [id, namepart] = parts;
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PascalCase –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      const formatted = namepart
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, (str) => str.toUpperCase())
        .trim();

      return `${id}. ${formatted}`;
    }

    return templateId;
  }
}
