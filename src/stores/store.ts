/* eslint-disable @typescript-eslint/no-explicit-any */
import { defineStore } from 'pinia';
import { getBodyContent } from 'src/shared/lib';
import type { TemplateFile } from 'src/services/TemplateService';

interface ModelState {
  vars: Record<string, any>;
  translation: Record<string, any>;
  object_model: Record<string, any>;
}

export const useAppState = defineStore('app', {
  state: () => ({
    context: '',
    model: {
      vars: {} as Record<string, any>,
      translation: {} as Record<string, any>,
      object_model: {} as Record<string, any>,
    } as ModelState,
    html: '',
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏
    currentTemplate: null as TemplateFile | null,
    templates: [] as TemplateFile[],
    isTemplateListLoaded: false,
  }),
  actions: {
    setContext(context: string, model: any) {
      console.log('üîß setContext called with:', {
        contextLength: context?.length || 0,
        modelVarsKeys: Object.keys(model.vars || {}),
        modelTranslationKeys: Object.keys(model.translation || {}),
        modelObjectModelKeys: Object.keys(model.object_model || {}),
        modelObjectModelSample:
          JSON.stringify(model.object_model || {}).substring(0, 200) + '...',
      });

      this.context = context;
      this.model = {
        vars: model.vars || {},
        translation: model.translation || {},
        object_model: model.object_model || {},
      };

      console.log('‚úÖ Context and model set:', {
        contextLength: this.context.length,
        modelKeys: {
          vars: Object.keys(this.model.vars),
          translation: Object.keys(this.model.translation),
          object_model: Object.keys(this.model.object_model),
        },
      });
    },

    // –ù–æ–≤—ã–µ actions –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏
    setTemplates(templates: TemplateFile[]) {
      this.templates = templates;
      this.isTemplateListLoaded = true;
    },

    setCurrentTemplate(template: TemplateFile) {
      console.log('üéØ Setting current template:', {
        templateId: template.id,
        templateName: template.name,
        hasExampleData: !!(
          template.exampleData && Object.keys(template.exampleData).length > 0
        ),
        exampleDataKeys: Object.keys(template.exampleData || {}),
        exampleDataSample:
          JSON.stringify(template.exampleData || {}).substring(0, 200) + '...',
        contextLength: template.context?.length || 0,
      });

      this.currentTemplate = template;
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∞—Ä—ã–µ
      const modelData = {
        vars: {},
        translation: template.translation,
        object_model: template.exampleData || {}, // –ï—Å–ª–∏ –Ω–µ—Ç exampleData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      };

      console.log('üìù Setting context with model:', {
        contextLength: template.context?.length || 0,
        translationKeys: Object.keys(modelData.translation || {}),
        objectModelKeys: Object.keys(modelData.object_model || {}),
        objectModelSample:
          JSON.stringify(modelData.object_model).substring(0, 200) + '...',
      });

      this.setContext(template.context, modelData);
    },

    updateCurrentTemplate() {
      if (this.currentTemplate) {
        this.currentTemplate.context = this.context;
        this.currentTemplate.translation = this.model.translation;
        this.currentTemplate.exampleData = this.model.object_model;
      }
    },

    async update() {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º object_model –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const renderData =
        Object.keys(this.model.object_model).length > 0
          ? this.model.object_model
          : this.model.vars;

      this.html = await getBodyContent(
        this.context,
        renderData,
        this.model.translation
      );
      console.log('this.model', this.model);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω
      this.updateCurrentTemplate();
    },

    parseContext() {
      console.log('üîç parseContext started with current state:', {
        currentTemplateId: this.currentTemplate?.id || 'none',
        currentTemplateHasExampleData: !!(
          this.currentTemplate?.exampleData &&
          Object.keys(this.currentTemplate.exampleData).length > 0
        ),
        currentModelObjectModelKeys: Object.keys(this.model.object_model || {}),
        contextLength: this.context?.length || 0,
      });

      const variableRegex = /{{\s*([\w\.]+)(?:\s*\|\s*\w+)?\s*}}/g;
      // –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π translationRegex –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –±–µ–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
      const translationRegex = /{% trans '([^']+)'(?:,\s*([\w\.]+))* %}/g;
      const ifRegex = /{% (?:if|elif) ([\w\.]+)(?:\s*==\s*'(.*?)')? %}/g;
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–µ–∫—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–∏–∫–ª–æ–≤ for
      const forRegex = /{% for (\w+) in (\w+) %}/g;

      const variables: Record<string, any> = {};
      const translations: Record<string, any> = {};
      const objectModel: Record<string, any> = {};
      const loopVariables = new Set<string>(); // –ù–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤

      let match;

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–≤
      while ((match = forRegex.exec(this.context)) !== null) {
        const loopVar = match[1]; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "question")
        const arrayName = match[2]; // –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "questions")

        loopVariables.add(loopVar); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ü–∏–∫–ª–∞

        // –ï—Å–ª–∏ –≤ object_model —É–∂–µ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (
          this.model.object_model[arrayName] &&
          Array.isArray(this.model.object_model[arrayName])
        ) {
          objectModel[arrayName] = this.model.object_model[arrayName];
        } else {
          // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –¥–ª—è –Ω–∞—á–∞–ª–∞
          objectModel[arrayName] = [{}];
        }
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–µ–≥–µ–∫—Å–∞
      forRegex.lastIndex = 0;

      while ((match = ifRegex.exec(this.context)) !== null) {
        const varPath = match[1];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ü–∏–∫–ª–∞
        const rootVar = varPath.split('.')[0];
        if (loopVariables.has(rootVar)) {
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–≤
        }

        if (varPath.includes('.')) {
          const parts = varPath.split('.');
          let current = objectModel;
          for (let i = 0; i < parts.length - 1; i++) {
            if (!current[parts[i]]) {
              current[parts[i]] = {};
            }
            current = current[parts[i]];
          }
          current[parts[parts.length - 1]] = '';
        } else {
          // –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ if –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∫–æ—Ä–µ–Ω—å object_model
          objectModel[varPath] = '';
        }
      }

      while ((match = variableRegex.exec(this.context)) !== null) {
        const varPath = match[1];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ü–∏–∫–ª–∞
        const rootVar = varPath.split('.')[0];
        if (loopVariables.has(rootVar)) {
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–≤ (question.title, question.context –∏ —Ç.–¥.)
        }

        // –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ object_model —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
        if (varPath.includes('.')) {
          const parts = varPath.split('.');
          let current = objectModel;
          for (let i = 0; i < parts.length - 1; i++) {
            if (!current[parts[i]]) {
              current[parts[i]] = {};
            }
            current = current[parts[i]];
          }
          current[parts[parts.length - 1]] = '';
        } else {
          // –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø–∞ {{dd}} –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ö–û–†–ï–ù–¨ object_model
          objectModel[varPath] = '';
        }
      }

      while ((match = translationRegex.exec(this.context)) !== null) {
        translations[match[1]] = '';
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–µ–∑ –∏–º–µ–Ω, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        const args = match[0]
          .slice(match[0].indexOf("'") + 1, -3)
          .split(',')
          .slice(1);
        args.forEach((arg) => {
          const varMatch = arg.trim();
          if (varMatch) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ü–∏–∫–ª–∞
            const rootVar = varMatch.split('.')[0];
            if (loopVariables.has(rootVar)) {
              return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–≤
            }

            if (varMatch.includes('.')) {
              const parts = varMatch.split('.');
              let current = objectModel;
              for (let i = 0; i < parts.length - 1; i++) {
                if (!current[parts[i]]) {
                  current[parts[i]] = {};
                }
                current = current[parts[i]];
              }
              current[parts[parts.length - 1]] = '';
            } else {
              // –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ç–æ–∂–µ –≤ –∫–æ—Ä–µ–Ω—å object_model
              objectModel[varMatch] = '';
            }
          }
        });
      }

      // –ú–µ—Ä–∂–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
      const mergeWithPreservation = (
        target: Record<string, any>,
        source: Record<string, any>
      ) => {
        Object.keys(target).forEach((key) => {
          if (!source.hasOwnProperty(key)) {
            delete target[key];
          } else if (
            typeof target[key] === 'object' &&
            typeof source[key] === 'object' &&
            !Array.isArray(target[key]) &&
            !Array.isArray(source[key])
          ) {
            mergeWithPreservation(target[key], source[key]);
          }
        });

        Object.keys(source).forEach((key) => {
          if (!target.hasOwnProperty(key)) {
            target[key] = source[key];
          }
        });
      };

      if (this.model && this.model.vars && this.model.translation) {
        mergeWithPreservation(this.model.vars, variables);
        mergeWithPreservation(this.model.translation, translations);

        // –ï—Å–ª–∏ –µ—Å—Ç—å exampleData –≤ —Ç–µ–∫—É—â–µ–º —à–∞–±–ª–æ–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –±–∞–∑—É
        if (
          this.currentTemplate &&
          this.currentTemplate.exampleData &&
          Object.keys(this.currentTemplate.exampleData).length > 0
        ) {
          // –ú–µ—Ä–∂–∏–º —Å exampleData –∫–∞–∫ –±–∞–∑–æ–π
          const baseObjectModel = { ...this.currentTemplate.exampleData };
          mergeWithPreservation(baseObjectModel, objectModel);
          this.model.object_model = baseObjectModel;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç exampleData, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          this.model.object_model = objectModel;
        }

        console.log('–ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', {
          loopVariables: Array.from(loopVariables),
          vars: this.model.vars,
          object_model: this.model.object_model,
          hasExampleData: !!(
            this.currentTemplate &&
            Object.keys(this.currentTemplate.exampleData || {}).length > 0
          ),
        });
      } else {
        this.model = {
          vars: variables,
          translation: translations,
          object_model: objectModel,
        };
      }

      this.update();
    },
  },
  getters: {
    getTemplate: (state) => () => {
      return JSON.stringify(
        {
          context: state.context,
          model: state.model.vars,
          translation: state.model.translation,
          exampleData: state.model.object_model,
        },
        null,
        2
      );
    },
  },
  persist: {
    enabled: true,
    strategies: [
      {
        key: 'app',
        storage: localStorage,
        paths: ['context', 'html', 'currentTemplate'],
      },
    ],
  },
});
