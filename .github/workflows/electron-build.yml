name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

  build:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get package info
        id: package
        run: |
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "NAME=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Electron App for Windows
        if: matrix.os == 'windows-latest'
        run: pnpm build:electron
        env:
          PLATFORM: win32

      - name: Build Electron App for macOS
        if: matrix.os == 'macos-latest'
        run: pnpm build:electron
        env:
          PLATFORM: darwin

      - name: Build Electron App for Linux
        if: matrix.os == 'ubuntu-latest'
        run: pnpm build:electron
        env:
          PLATFORM: linux

      - name: Prepare for artifact upload
        id: prepare_artifacts
        run: |
          APP_NAME=${{ steps.package.outputs.NAME }}
          APP_VERSION=${{ steps.package.outputs.VERSION }}
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "ARTIFACT_PATHS=dist/electron/*.exe" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=$APP_NAME-windows-$APP_VERSION" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "ARTIFACT_PATHS=dist/electron/*.dmg" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=$APP_NAME-macos-$APP_VERSION" >> $GITHUB_OUTPUT
          else
            echo "ARTIFACT_PATHS=dist/electron/*.AppImage" >> $GITHUB_OUTPUT
            echo "ARTIFACT_NAME=$APP_NAME-linux-$APP_VERSION" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifacts.outputs.ARTIFACT_NAME }}
          path: ${{ steps.prepare_artifacts.outputs.ARTIFACT_PATHS }}
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get package info
        id: package
        run: |
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "NAME=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.package.outputs.NAME }} v${{ steps.package.outputs.VERSION }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
